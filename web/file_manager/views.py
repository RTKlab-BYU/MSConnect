"""
Define the app pages for the project.
"""

# Standard library imports
import logging
import os
import random
import string
import subprocess
import shutil
import time
import glob


# Third-party imports
import requests
import plotly.graph_objs as go
import pickle
import numpy as np
from datetime import datetime, timedelta
from plotly.graph_objs import Scatter
from plotly.offline import plot
from zipfile import ZipFile
from urllib.request import urlretrieve, urlcleanup
from urllib.parse import urlsplit

# Django imports
from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import Group
from django.contrib.admin.views.decorators import staff_member_required
from django.core import management
from django.core.files import File

from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.utils.timezone import utc
from django.views.decorators.csrf import csrf_exempt

# Django REST Framework imports
from rest_framework import permissions, viewsets
from rest_framework.decorators import api_view
from rest_framework.response import Response

# Local imports
from .models import FileStorage, SampleRecord, UserSettings, SystemSettings, \
    WorkerStatus, DataAnalysisQueue, ProcessingApp, VisualizationApp
from .serializers import FileStorageSerializer,  SampleRecordSerializer, \
    WorkerStatusSerializer, DataAnalysisQueueSerializer, \
    ProcessingAppSerializer

CACHE_FILE = "file_manager/cache/dash_cache.pickle"

User = get_user_model()
startTime = time.time()

logger = logging.getLogger(__name__)


# used for authenticated through API, will return render error on server log
# Maybe need add a brute force attach prevention using rest Throtting
@csrf_exempt
@api_view(['GET', 'POST', 'PUT'])
def auth(request):  # used for authenticated through API
    return Response({"message": "Hello, world!"})


@login_required
def dashboard(request):
    """_Dashboard page, cache data for fast loading, cached is generated by
    schedule hourly in web/schedule_achive/automated_tasks.py_
    """
    cached_data = {}
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, 'rb') as handle:
            cached_data = pickle.load(handle)
            cached_data["last_updated"] = time.ctime(
                os.path.getctime(CACHE_FILE))
    # dynamic data loaded from database
    args = {
        "facility_name": SystemSettings.objects.first().facility_name,
    }
    args.update(cached_data)
    return render(request, 'filemanager/dashboard.html', args)


@login_required
def user_settings(request):
    """_User settings page, allow user to change their settings_
    """
    # user settings and
    if request.method == 'POST' and 'save_settings' in request.POST:
        UserSettings.objects.filter(
            user=request.user.id).update(hide_othersresult=request.
                                         POST.get('hide_othersresult'))
        UserSettings.objects.filter(
            user=request.user.id).update(replace_raw_with_mzML=request.
                                         POST.get('replace_raw_with_mzML'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_1_name=request.
                                         POST.get('qc_1_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_2_name=request.
                                         POST.get('qc_2_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_3_name=request.
                                         POST.get('qc_3_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_4_name=request.
                                         POST.get('qc_4_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(QC_tool=request.
                                         POST.get('qc_selector'))
        UserSettings.objects.filter(
            user=request.user.id).update(workflow_tool=request.
                                         POST.getlist('workflow_selector'))
        UserSettings.objects.filter(
            user=request.user.id).update(perform_extraction=request.
                                         POST.get('perform_extraction'))
    # create user settings if not exist
    if UserSettings.objects.filter(
            user=request.user.id).first() is None:
        form_data = {
            'user': request.user,

        }
        UserSettings.objects.create(**form_data, )

    # generate list of all apps with presets as a list
    qc_preset_dict = {}
    for item in ProcessingApp.objects.filter(is_enabled=True).all():
        for n in range(1, 9):
            preset_name = getattr(item, f"preset_{n}")
            if preset_name:
                # format for qc_pro_tool is process_app_pk_"qc"_preset_number
                preset_key = str(item.pk)+"qc"+str(n)
                qc_preset_dict[preset_key] = item.name + \
                    f"_{n}_" + preset_name.name
        for n in range(1, 3):
            preset_name = getattr(item, f"user_preset_{n}")
            if preset_name:
                # format for qc_pro_tool is process_app_pk_"qc"_preset_number
                preset_key = str(item.pk)+"qc"+str(n)
                qc_preset_dict[preset_key] = item.name + \
                    f"_{n}_" + preset_name.name
    qc_preset_dict["None"] = "None"
    args = {
        'settings':
        UserSettings.objects.filter(
            user=request.user.id).first(),
        'qc_settings': qc_preset_dict,
    }
    return render(request, 'filemanager/user_settings.html', args)


@staff_member_required
def system_settings(request):
    """_System settings for admins only, used to manage database, backup,
    restorations, reboots_
    """
    message = ""
    if request.method == 'POST' and 'rollback' in request.POST:
        management.call_command(
            'dbrestore', '-z',
            f'-i={request.POST.get("database_to_restore")}', '--noinput')
    elif request.method == 'POST' and 'backup_now' in request.POST:
        management.call_command('dbbackup', '-z', "--clean")
    elif request.method == 'POST' and 'save_backup_settings' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "backup" in key:
                qs.auto_backup_settings[key] = value[0]
        qs.save()
    elif request.method == 'POST' and 'save_purge_settings' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "purge" in key:
                qs.auto_purge_settings[key] = value[0]
        qs.save()
    elif request.method == 'POST' and \
            'save_system_file_setting' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "system_file_backup" in key:
                qs.systemfile_backup_settings[key] = value[0]
        qs.save()
    elif request.method == 'POST' and 'save_schedule_settings' in request.POST:
        # file is used as setting need be pulled during system bootup
        schedule_setting_dict = {}
        for key, value in dict(request.POST.lists()).items():
            if "schedule" in key:
                schedule_setting_dict[key] = value[0]
        with open(settings.SCHEDULE_SETTING_FILE, 'wb+') as f:
            pickle.dump(schedule_setting_dict, f)
    elif request.method == 'POST' and 'reboot' in request.POST:
        from pathlib import Path
        # for debug server
        Path('manage.py').touch()
        # for production server
        os.system('/venv/bin/uwsgi --reload /app/datamanager-master.pid')
    elif request.method == 'POST' and 'start_process' in request.POST:
        if request.POST.get('action_type') == "0":  # restore raw file
            para = request.POST.get('restore_para')
            try:
                index_list = para.split("-")
                start_index = int(index_list[0])
                end_index = int(index_list[1])
                restored_list = ""
                for n in range(start_index, end_index+1):
                    try:
                        record = SampleRecord.objects.filter(pk=n)[0]
                        for item in record.file_storage_indeces.all():
                            if int(item.file_type) == int(
                                    request.POST.get('source')) + 1 and \
                                    os.path.splitext(
                                        item.file_location.name)[
                                            1][1:] == "7z":
                                temp_folder = settings.TEMP_FOLDER
                                cmd = ['7z',
                                       'x',
                                       os.path.join(
                                           settings.MEDIA_ROOT,
                                           item.file_location.name),
                                       '-o' + temp_folder]
                                process_output = subprocess.check_output(cmd)
                                logger.info(
                                    f"{item.file_location.name} unzipped"
                                    f"{process_output}")

                                file_year, file_month, file_day = \
                                    record.acquisition_time.year, \
                                    record.acquisition_time.month, \
                                    record.acquisition_time.day

                                if record.project_name != "":
                                    file_dir = f"primary_storage/rawfiles/" \
                                        f"{file_year}/{file_month}/" \
                                        f"{record.project_name}/"
                                else:
                                    file_dir = f"primary_storage/rawfiles/" \
                                        f"{file_year}/" \
                                        f"{file_month}/{file_day}/"
                                file_name = ""
                                for f in os.listdir(temp_folder):
                                    if f.split(".")[0] == \
                                            os.path.os.path.splitext(
                                            item.file_location.name)[
                                            0].split('/')[-1]:
                                        file_name = f
                                    else:
                                        os.remove(temp_folder+f)
                                if file_name != "":
                                    target_file_path = file_dir + file_name
                                else:
                                    continue
                                if os.path.exists(os.path.join(
                                    settings.MEDIA_ROOT,
                                        target_file_path)):
                                    random_str = "".join(
                                        random.choice(
                                            string.ascii_lowercase
                                        ) for i in range(4))
                                    file_name_part, file_ext_part = \
                                        os.path.splitext(target_file_path)
                                    target_file_path = file_name_part + \
                                        "_" + random_str + "_" + file_ext_part
                                shutil.move(
                                    temp_folder + file_name,
                                    os.path.join(
                                        settings.MEDIA_ROOT, target_file_path))

                                FileStorageform = {
                                    "file_location": target_file_path,
                                    "file_type": 1
                                }

                                if int(record.newest_raw.file_type) == 1:
                                    record.file_storage_indeces.remove(
                                        record.newest_raw)
                                saved_storage = FileStorage.objects.create(
                                    **FileStorageform, )

                                record.file_storage_indeces.add(saved_storage)
                                record.newest_raw = saved_storage
                                record.uploaded_time = datetime.now()
                                record.save()
                        logger.info(
                            f"Recrod {record.pk}, "
                            f"{record.newest_raw.file_location}"
                            f" has been restored.")
                        restored_list = restored_list + \
                            str(record.pk) + ", "
                    except Exception as err:
                        logger.error(f"{err} occurred during restore "
                                     f"{n} raw file")
                message = f"The following record's raw file has " \
                    f"been processed {restored_list}," \
                    f" please verify or view log to see if it successed."
            except Exception as err:
                message += f"parameter need to be in index-index,"
                f" e.g., 203-204 format to restore 203 and 204. {err}"
                logger.info(message)
        if request.POST.get('action_type') == "1":  # restore processed file
            para = request.POST.get('restore_para')
            try:
                index_list = para.split("-")
                start_index = int(index_list[0])
                end_index = int(index_list[1])
                restored_list = ""
                for n in range(start_index, end_index+1):
                    try:
                        record = DataAnalysisQueue.objects.filter(pk=n)[0]
                        for item in record.backup_indeces.all():
                            if int(item.file_type) == int(
                                    request.POST.get('source')) + 6 and \
                                    os.path.splitext(
                                        item.file_location.name)[
                                            1][1:] == "7z":
                                temp_folder = settings.TEMP_FOLDER

                                cmd = ['7z',
                                       'x',
                                       os.path.join(
                                           settings.MEDIA_ROOT,
                                           item.file_location.name),
                                       '-o' + temp_folder]
                                process_output = subprocess.check_output(cmd)
                                logger.info(
                                    f"process file "
                                    f"{item.file_location.name} unzipped"
                                    f"{process_output}")

                                file_year, file_month, file_day = \
                                    record.submit_time.year,  \
                                    record.submit_time.month, \
                                    record.submit_time.day

                                file_dir = f"{settings.STORAGE_LIST[0]}/" \
                                    f"dataqueue/{file_year}/" \
                                    f"{file_month}/{file_day}/{record.pk}/"

                                check_folder = os.path.isdir(os.path.join(
                                    settings.MEDIA_ROOT, file_dir))
                                if not check_folder:
                                    os.makedirs(os.path.join(
                                        settings.MEDIA_ROOT, file_dir))
                                for f in os.listdir(temp_folder):
                                    file_prefix = f.split("-")[0]
                                    if file_prefix in \
                                            settings.PROCESS_FILE_LIST:
                                        target_file_path = file_dir + f
                                        if os.path.exists(os.path.join(
                                            settings.MEDIA_ROOT,
                                                target_file_path)):
                                            random_str = "".join(
                                                random.choice(
                                                    string.ascii_lowercase
                                                ) for i in range(4))
                                            file_name_part, file_ext_part = \
                                                os.path.splitext(
                                                    target_file_path)
                                            target_file_path = \
                                                file_name_part + \
                                                "_" + random_str + \
                                                "_" + file_ext_part
                                        shutil.move(
                                            temp_folder + f,
                                            os.path.join(
                                                settings.MEDIA_ROOT,
                                                target_file_path))
                                        old_value = getattr(record,
                                                            file_prefix).name
                                        old_file =\
                                            os.path.join(
                                                settings.MEDIA_ROOT, old_value
                                            )
                                        setattr(record, file_prefix,
                                                target_file_path)

                                        if os.path.exists(old_file) and \
                                                old_value != target_file_path:
                                            os.remove(old_file)
                                        logger.info(
                                            f"Process record {record.pk}, "
                                            f"{file_prefix}"
                                            f" has been restored.")
                                    else:
                                        os.remove(temp_folder+f)

                        record.finish_time = datetime.now()
                        record.save()
                        logger.info(
                            f"Process record {record.pk}, "
                            f" has been restored.")
                        restored_list = restored_list + \
                            str(record.pk) + ", "
                    except Exception as err:
                        logger.error(f"{err} occurred during restore "
                                     f"{n} process record")
                message = f"The following process record's file has " \
                    f"been processed {restored_list}," \
                    f" please verify or view log to see if it successed."
            except Exception as err:
                message += f"parameter need to be in index-index,"
                f" e.g., 203-204 format to restore 203 and 204. {err}"
                logger.info(message)
        if request.POST.get('action_type') == "2":  # restore system file
            para = request.POST.get('restore_para')
            try:
                if int(para) in range(-7, 1):
                    date_offset = int(para)
                    source_drive = request.POST.get('source')

                    restore_day = datetime.now() + \
                        timedelta(days=int(date_offset))

                    week_day = restore_day.strftime('%A')
                    logger.info(f"Start the Restoration of systemfiles from "
                                f"{settings.STORAGE_LIST[int(source_drive)]} "
                                f" from {week_day}")
                    zipname = os.path.join(
                        settings.MEDIA_ROOT,
                        f"{settings.STORAGE_LIST[int(source_drive)]}"
                        f"/system_file_backups/"
                        f"backup_{week_day}.7z")

                    cmd = ['7z', 'x',  zipname, '-o' +
                           os.path.join(
                               settings.MEDIA_ROOT,
                               settings.STORAGE_LIST[0]+"/"), '-y']
                    process_output = subprocess.check_output(cmd)
                    message = message + \
                        f"Restore Process finished with {process_output}"
                    logger.info(message)
                else:
                    message = f"Valid number is -6 to 0, see wiki for more."
            except Exception as error:
                message = f"No valid parameter or backup found, {error} "
                logger.info(message)
        if request.POST.get('action_type') == "3":  # Copy database to primary
            source_drive = int(request.POST.get('source'))

            backup_database_folder = os.path.join(
                settings.MEDIA_ROOT,
                settings.STORAGE_LIST[source_drive],
                "database_backup/")
            target_database_folder = os.path.join(
                settings.MEDIA_ROOT,
                settings.STORAGE_LIST[0],
                "database_backup/")
            for f in os.listdir(backup_database_folder):
                try:
                    shutil.copy(
                        backup_database_folder + f, target_database_folder
                    )
                except Exception as error:
                    message = f"Error occurred during moveing {f}, {error} "
                    logger.info(message)
            message = f"Finished processing databse file "\
                f"in {backup_database_folder} "
            logger.info(message)
        if request.POST.get('action_type') == "4":  # Copy all files to new
            # Storage(migration)
            source_drive = int(request.POST.get('source'))
            target_drive = int(request.POST.get('target'))

            source_folder = os.path.join(
                settings.MEDIA_ROOT,
                settings.STORAGE_LIST[source_drive])
            target_folder = os.path.join(
                settings.MEDIA_ROOT,
                settings.STORAGE_LIST[target_drive])

            try:
                output = shutil.copytree(
                    source_folder, target_folder, dirs_exist_ok=True)
            except Exception as error:
                message = f"Error occurred during migrating " \
                          f"{source_folder} to {target_folder}, {error}. "
            else:
                message = f"Finished processing migrating " \
                          f"{source_folder} to {target_folder}. "
            finally:
                logger.info(message + output)

    schedule_setting_dict = {}
    if os.path.isfile(settings.SCHEDULE_SETTING_FILE):
        with open(settings.SCHEDULE_SETTING_FILE, 'rb') as f:
            schedule_setting_dict = pickle.load(f)
    else:
        schedule_setting_dict = settings.DEFAULT_SCHEDULE
    backup_list = glob.glob(
        os.path.join(settings.MEDIA_ROOT,
                     "primary_storage/database_backup/*.gz"))
    backup_list.sort(key=os.path.getmtime)
    backup_list.reverse()
    args = {
        'all_database_backups': backup_list,
        'backup_options': settings.BACKUP_OPTIONS,
        'purge_options': settings.PURGE_OPTIONS,
        'current_backup':
            SystemSettings.objects.first().auto_backup_settings,
        'current_purge':
            SystemSettings.objects.first().auto_purge_settings,
        'schedule': schedule_setting_dict,
        'storage_options': settings.STORAGE_LIST,
        'current_sysfile_backup':
            SystemSettings.objects.first().systemfile_backup_settings,
        "message": message,

    }
    return render(request, 'filemanager/system_settings.html', args)


def help(request):
    """_Help page and other userful links_
    """
    return render(request, 'filemanager/help.html')


@ login_required
def records(request):
    """_Records querry page for search through SampleRecords_
    """
    # for a POST search request
    # TODO Maybe there is a cleaner or fast way to do this..
    if request.method == 'POST' and 'data_filter' in request.POST:
        result_queryset = SampleRecord.objects.all().order_by('-pk')
        if request.POST.get('pk_range') != "":
            try:
                pk_range = request.POST.get('pk_range').split("-")
                if pk_range[0]:
                    result_queryset = result_queryset.filter(
                        pk__gte=pk_range[0]).order_by('-pk')
                if pk_range[1]:
                    result_queryset = result_queryset.filter(
                        pk__lte=pk_range[1]).order_by('-pk')
            except Exception as ex:
                logger.error(f"Error during PK_range search {ex}")

        if request.POST.get('qc_range') != "":
            try:
                qc_range = request.POST.get('qc_range').split("-")
                if qc_range[0]:
                    result_queryset = result_queryset.filter(
                        quanlity_check__output_QC_number_1__gte=qc_range[
                            0]).order_by('-pk')
                if qc_range[1]:
                    result_queryset = result_queryset.filter(
                        quanlity_check__output_QC_number_1__lte=qc_range[
                            1]).order_by('-pk')
            except Exception as ex:
                logger.error(f"Error during qc_range search {ex}")
        if request.POST.get('record_name') != "":
            result_queryset = result_queryset.filter(
                record_name__contains=request.POST.
                get('record_name')).order_by('-pk')
        if request.POST.get('record_description') != "":
            result_queryset = result_queryset.filter(
                record_description__contains=request.POST.
                get('record_description')).order_by('-pk')
        if request.POST.get('instrument_sn') != "":
            result_queryset = result_queryset.filter(
                instrument_sn__contains=request.POST.
                get('instrument_sn')).order_by('-pk')
        if request.POST.get('notes') != "":
            result_queryset = result_queryset.filter(
                notes__contains=request.POST.get('notes')).order_by('-pk')
        if request.POST.get('record_creator') != "":
            if request.POST.get('record_creator') == "All" and \
                request.user.is_superuser is not True:
                # Prevent non-superuser from seeing all records, already
                # disabled all option in template
                result_queryset = None
            else:
                result_queryset = result_queryset.filter(
                    record_creator=request.POST.get('record_creator')).order_by(
                    '-pk')
        if request.POST.get('start_time') != "":
            result_queryset = result_queryset.filter(
                acquisition_time__gte=request.POST.get('start_time')).order_by(
                    '-pk')
        if request.POST.get('end_time') != "":
            result_queryset = result_queryset.filter(
                acquisition_time__lte=request.POST.get(
                    'end_time') + " 23:59").order_by('-pk')

        if request.POST.get('custom_value') != "" and request.POST.get(
                'custom_para') != "":
            variable_column = request.POST.get('custom_para')
            search_type = 'contains'
            filter = variable_column + '__' + search_type
            result_queryset = result_queryset.filter(
                **{filter: request.POST.get('custom_value')}).order_by('-pk')

        if request.POST.get('project_name') != "":
            result_queryset = result_queryset.filter(
                project_name__contains=request.POST.get(
                    'project_name')).order_by('-pk')

        args = {
            'Records': result_queryset,
            'Current_message':
                f"Search resulted {len(result_queryset)} records",
            "formdata": request.POST,
            "users": User.objects.all()


        }
    else:
        # for view recent request (get, not post)
        if UserSettings.objects.filter(
                user=request.user.id).first() is None:
            form_data = {
                'user': request.user,
            }
            UserSettings.objects.create(**form_data, )
        if UserSettings.objects.filter(
            user=request.user.id).first().hide_othersresult or \
                (SystemSettings.objects.first().secret_mode and
                 not request.user.is_staff):
            # user setting to hide other's result or system setting to
            # serect mode and user is not staff
            args = {
                'Records':
                SampleRecord.objects.filter(
                    record_creator=request.user.id).order_by('-pk')[:100],
                'Current_message': "Last 100 uploaded runs",
                "users": User.objects.filter(username=request.user),

            }
        else:
            args = {
                'Records': SampleRecord.objects.all().order_by('-pk')[:100],
                'Current_message': "Last 100 uploaded runs",
                "users": User.objects.all(),
            }

#    add qc parameter names based on user settings
    if UserSettings.objects.filter(
            user=request.user.id).first() is None:
        form_data = {
            'user': request.user,
        }
        UserSettings.objects.create(**form_data, )
    args["qc1"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_1_name
    args["qc2"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_2_name
    args["qc3"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_3_name
    args["qc4"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_4_name
    args["is_superuser"] = request.user.is_superuser

    return render(request, 'filemanager/records.html', args)


@ login_required
def load_record(request, pk, *args, **kwargs):
    """_Load detailed info for one SampleRecord_
    """
    message = ""  # for popup message

    if pk == 9990999:  # used for debuging and customized task
        from schedule_archive.automated_tasks import remote_achieve
        remote_achieve()

    # for all request with posts
    if request.method == 'POST' and 'delete' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or\
                SampleRecord.objects.filter(pk=pk)[0].record_creator is None:
            SampleRecord.objects.filter(pk=pk).delete()
            return HttpResponseRedirect("/files/records/")
        else:
            message = "Sorry, you don't own this record"

    # change file name according to record name, only newest raw
    elif request.method == 'POST' and 'update_file_name' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or\
                SampleRecord.objects.filter(pk=pk)[0].record_creator is None:
            current_record_name = SampleRecord.objects.filter(pk=pk)[
                0].record_name
            currenent_filename = SampleRecord.objects.filter(pk=pk)[
                0].newest_raw.file_location.name
            new_filename = os.path.join(os.path.dirname(currenent_filename),
                                        current_record_name + ".raw")
            if (currenent_filename != new_filename):
                try:
                    os.rename(os.path.join(settings.MEDIA_ROOT,
                                           currenent_filename), os.path.join(
                        settings.MEDIA_ROOT, new_filename))
                    if (os.path.exists(os.path.join(
                            settings.MEDIA_ROOT, new_filename))):
                        FileStorage.objects.filter(
                            pk=SampleRecord.objects.filter(pk=pk)[
                                0].newest_raw.pk).update(
                                    file_location=new_filename)

                except Exception as err:
                    message = f"Sorry, please chagne recrod name as {err}"

        else:
            message = "Sorry, you don't own this record"

    elif request.method == 'POST' and 'save' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or SampleRecord.objects.filter(
                    pk=pk)[0].record_creator is None:
            SampleRecord.objects.filter(pk=pk).update(
                notes=request.POST.get('notes'))
            SampleRecord.objects.filter(pk=pk).update(
                record_description=request.POST.get('desc'))
            SampleRecord.objects.filter(pk=pk).update(
                is_temp=request.POST.get('is_temp'))
            SampleRecord.objects.filter(pk=pk).update(
                record_name=request.POST.get('record_name'))
            if request.FILES.get('attachment') is not None:
                attachmentfileform = {"file_location": request.FILES.get(
                    'attachment'), "file_type": 5}
                SampleRecord.objects.filter(pk=pk)[0].note_file.add(
                    FileStorage.objects.create(**attachmentfileform, ))
        else:
            message = "Sorry, you don't own this record"

    # plot two plotly graph
    if request.method == 'POST' and 'compare' in request.POST:
        compareid = int(request.POST.get('compare_id'))
        if (SampleRecord.objects.filter(pk=pk)[
            0].cache_pkl is not None and
                SampleRecord.objects.filter(pk=compareid)[
            0].cache_pkl
                is not None):
            filename = os.path.join(settings.MEDIA_ROOT,
                                    SampleRecord.objects.filter(pk=pk)[
                                        0].cache_pkl.file_location.name)
            filename2 = os.path.join(settings.MEDIA_ROOT,
                                     SampleRecord.objects.filter(pk=compareid)[
                                         0].cache_pkl.file_location.name)
            with open(filename, 'rb') as handle:
                plot_data = pickle.load(handle)
            with open(filename2, 'rb') as handle2:
                plot_data2 = pickle.load(handle2)
            plot_div = plot({"data":
                             [Scatter(x=plot_data["MS1_RT"],
                                      y=plot_data["MS1_Basemzintensity"],
                                      mode='lines',
                                      name='BIC',
                                      opacity=0.8,
                                      marker_color='green',
                                      yaxis='y1',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data["MS1_RT"],
                                      y=plot_data["MS1_Ticintensity"],
                                      mode='lines',
                                      name='TIC',
                                      opacity=0.8,
                                      marker_color='Red',
                                      yaxis='y1',
                                      visible='legendonly',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data["MS2_RT"],
                                      y=plot_data["MS2_Injectiontime"],
                                      mode='lines',
                                      name='MS2 Injection Time',
                                      opacity=0.8,
                                      marker_color='blue',
                                      visible='legendonly',
                                      yaxis='y2'),
                              Scatter(x=plot_data2["MS1_RT"],
                                      y=plot_data2["MS1_Basemzintensity"],
                                      mode='lines',
                                      name=f'{compareid} BIC',
                                      opacity=0.8,
                                      marker_color='olive',
                                      yaxis='y1',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data2["MS1_RT"],
                                      y=plot_data2["MS1_Ticintensity"],
                                      mode='lines',
                                      name=f'{compareid} TIC',
                                      opacity=0.8,
                                      marker_color='darkred',
                                      yaxis='y1',
                                      visible='legendonly',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data2["MS2_RT"],
                                      y=plot_data2["MS2_Injectiontime"],
                                      mode='lines',
                                      name=f'{compareid} MS2 Injection Time',
                                      opacity=0.8,
                                      marker_color='firebrick',
                                      visible='legendonly',
                                      yaxis='y2')],
                             "layout":
                             go.Layout(yaxis=dict(title='Ion Intensity /Ab'),
                                       yaxis2=dict(title='Injection Time /ms',
                                                   overlaying='y',
                                                   side='right'))},
                            output_type='div', show_link=False, link_text="")
        else:
            plot_div = None

    # TODO limited user access if secret_mode is on
    else:
        if (SampleRecord.objects.filter(pk=pk)[
                0].cache_pkl is not None):
            filename = os.path.join(settings.MEDIA_ROOT,
                                    SampleRecord.objects.filter(pk=pk)[
                                        0].cache_pkl.file_location.name)
            try:
                with open(filename, 'rb') as handle:
                    plot_data = pickle.load(handle)
                    plot_div = plot({"data":
                                     [Scatter(x=plot_data["MS1_RT"],
                                              y=plot_data[
                                         "MS1_Basemzintensity"],
                                         mode='lines',
                                         name='BIC',
                                         opacity=0.8,
                                         marker_color='green',
                                         yaxis='y1',
                                         line=dict(width=1,)),
                                      Scatter(x=plot_data["MS1_RT"],
                                              y=plot_data["MS1_Ticintensity"],
                                              mode='lines',
                                              name='TIC',
                                              opacity=0.8,
                                              marker_color='Red',
                                              yaxis='y1',
                                              visible='legendonly',
                                              line=dict(width=1,)),
                                      Scatter(x=plot_data["MS2_RT"],
                                              y=plot_data["MS2_Injectiontime"],
                                              mode='lines',
                                              name='MS2 Injection Time',
                                              opacity=0.8,
                                              marker_color='blue',
                                              visible='legendonly',
                                              yaxis='y2')
                                      ],
                                     "layout":
                                     go.Layout(
                                         yaxis=dict(title='Ion Intensity /Ab'),
                                         yaxis2=dict(
                                             title='Injection Time /ms',
                                             overlaying='y',
                                             side='right'))},
                                    output_type='div',
                                    show_link=False,
                                    link_text="")
            except OSError:
                plot_div = None

        else:
            plot_div = None

    notes = SampleRecord.objects.filter(pk=pk)[0].file_attachments.all()
    notelist = []
    for item in notes:
        notelist.append(item.file_location)

    storages = SampleRecord.objects.filter(pk=pk)[0].file_storage_indeces.all()
    storages_list = []
    for item in storages:
        each_record = {}
        each_record["type"] = item.file_type
        each_record["link"] = item.file_location
        storages_list.append(each_record)

    args = {
        "detail": SampleRecord.objects.filter(pk=pk)[0],
        "notefile": notelist,
        "message": message,
        "plot_div": plot_div,
        "storages": storages_list
    }
    return render(request, 'filemanager/detail.html', args)


@ login_required
def sample_info(request, pk, *args, **kwargs):
    """_Page for user to view or update sample info in the SampleRecord table_
    """
    message = ""
    # TODO chagne to a little elegant soltuion for udpating
    if request.method == 'POST' and 'save' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].sample.first().record_creator or \
            SampleRecord.objects.filter(
                    pk=pk)[0].sample.first() is None:
            SampleRecord.objects.filter(pk=pk).update(
                sample_type=request.POST.get('sample_type'))
            SampleRecord.objects.filter(pk=pk).update(
                project_name=request.POST.get('project_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_1_name=request.POST.get('factor_1_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_1_value=request.POST.get('factor_1_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_2_name=request.POST.get('factor_2_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_2_value=request.POST.get('factor_2_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_3_name=request.POST.get('factor_3_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_3_value=request.POST.get('factor_3_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_4_name=request.POST.get('factor_4_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_4_value=request.POST.get('factor_4_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_5_name=request.POST.get('factor_5_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_5_value=request.POST.get('factor_5_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_6_name=request.POST.get('factor_6_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_6_value=request.POST.get('factor_6_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_7_name=request.POST.get('factor_7_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_7_value=request.POST.get('factor_7_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_8_name=request.POST.get('factor_8_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_8_value=request.POST.get('factor_8_value'))
        else:
            message = "Sorry, you don't own this record"
    args = {
        "sample": SampleRecord.objects.filter(pk=pk)[0],
        "message": message,
    }
    return render(request, 'filemanager/sampleinfo.html', args)


@ login_required
def processing_center(request):
    """_Page for the processing queue and processing Nodes_
    """
    if request.method == 'POST' and 'data_filter' in request.POST:
        result_queryset = DataAnalysisQueue.objects.all().order_by('-pk')
        if request.POST.get('pk_range') != "":
            try:
                pk_range = request.POST.get('pk_range').split("-")
                if pk_range[0]:
                    result_queryset = result_queryset.filter(
                        pk__gte=pk_range[0]).order_by('-pk')
                if pk_range[1]:
                    result_queryset = result_queryset.filter(
                        pk__lte=pk_range[1]).order_by('-pk')
            except Exception as ex:
                logger.error(f"Error during process PK_range search {ex}")

        if request.POST.get('qc_range') != "":
            try:
                qc_range = request.POST.get('qc_range').split("-")
                if qc_range[0]:
                    result_queryset = result_queryset.filter(
                        output_QC_number_1__gte=qc_range[
                            0]).order_by('-pk')
                if qc_range[1]:
                    result_queryset = result_queryset.filter(
                        output_QC_number_1__lte=qc_range[
                            1]).order_by('-pk')
            except Exception as ex:
                logger.error(f"Error during process QC_range search {ex}")

        if request.POST.get('process_name') != "":
            result_queryset = result_queryset.filter(
                processing_name__contains=request.POST.
                get('process_name')).order_by('-pk')

        if request.POST.get('process_creator') != "":
            result_queryset = result_queryset.filter(
                process_creator=request.POST.get(
                    'process_creator')).order_by('-pk')
        if request.POST.get('process_app') != "":
            result_queryset = result_queryset.filter(
                processing_app=request.POST.get(
                    'process_app')).order_by('-pk')
        if request.POST.get('start_time') != "":
            result_queryset = result_queryset.filter(
                finish_time__gte=request.POST.get(
                    'start_time')).order_by('-pk')

        if request.POST.get('end_time') != "":
            result_queryset = result_queryset.filter(
                finish_time__lte=request.POST.get(
                    'end_time') + " 23:59").order_by('-pk')

        if request.POST.get('contained_record') != "":
            try:
                contained_record_range = request.POST.get(
                    'contained_record').split(",")
                for record in contained_record_range:
                    if 'combined' not in locals():
                        combined = result_queryset.filter(
                            sample_records=record).order_by('-pk')
                    else:
                        combined = combined | result_queryset.filter(
                            sample_records=record).order_by('-pk')

            except Exception as ex:
                logger.warning(
                    f"warning during process contained_record search {ex}")

            finally:
                result_queryset = combined

    else:
        result_queryset = DataAnalysisQueue.objects.all(
        ).order_by('-pk')[:100]

    args = {
        'processing_apps':
        ProcessingApp.objects.filter(is_enabled=True),
        'workers': WorkerStatus.objects.all(),
        'processing_queue': result_queryset,
        'formdata': request.POST,
        'process_apps': ProcessingApp.objects.all(),
        'users': User.objects.all(),

        'Current_message': f"Showing {len(result_queryset)} records",
    }

    return render(request, 'filemanager/processing_center.html', args)


@ login_required
def visual_center(request):
    """_Page for the visualization Nodes_
    """
    args = {
        'visualization_apps':
        VisualizationApp.objects.filter(is_enabled=True),
    }
    return render(request, 'filemanager/visualization_center.html', args)


@staff_member_required
def app_center(request):
    """_used to donwload processing, visualization apps from server,
    install/enable new apps, update installed apps_

    """
    process_file_list = ["icon", "install_package", "process_package", ]
    visual_file_list = ["icon", "install_package", ]

    store_url = SystemSettings.objects.first().app_store_server
    response = requests.get(store_url + "/apps/api/ProcessingApp/")
    process_app_list = response.json()
    visual_response = requests.get(
        SystemSettings.objects.first().app_store_server +
        "/apps/api/VisualizationApp/")
    visual_app_list = visual_response.json()
    if request.method == 'POST':
        for actions in request.POST.keys():
            if "removeapp_" in actions:  # remove app
                a_list = actions.split("_")
                if a_list[1] == "p":
                    for item in process_file_list:  # delete all the files
                        try:
                            file_url = getattr(ProcessingApp.objects.filter(
                                pk=int(a_list[2]))[0], item)
                            os.remove(os.path.join(
                                settings.MEDIA_ROOT, file_url.name))
                        except Exception as err:
                            logger.warning(f"While Deleting {item}, {err}")
                    ProcessingApp.objects.filter(pk=int(a_list[2])).delete()
                if a_list[1] == "v":
                    for item in visual_file_list:
                        try:
                            file_url = getattr(VisualizationApp.objects.filter(
                                pk=int(a_list[2]))[0], item)
                            os.remove(os.path.join(
                                settings.MEDIA_ROOT, file_url.name))
                        except Exception as err:
                            logger.warning(f"While Deleting {item}, {err}")

                    VisualizationApp.objects.filter(pk=int(a_list[2])).delete()

            if "downloadapp_" in actions:  # download app from store
                a_list = actions.split("_")
                if a_list[1] == "p":
                    app_info = requests.get(
                        store_url + f"/apps/api/ProcessingApp/{a_list[2]}/")
                    app_info = app_info.json()
                    # check if already exist, update files if version is old
                    if_exist = ProcessingApp.objects.filter(
                        UUID=app_info['UUID'])
                    if if_exist.count() != 0:
                        selected_app = if_exist[0]
                        # delete old files,
                        for item in process_file_list:
                            try:
                                file_url = getattr(selected_app, item)
                                os.remove(os.path.join(
                                    settings.MEDIA_ROOT, file_url.name))
                            except Exception as err:
                                logger.warning(
                                    f"While Deleting {item}, {err}")
                            # download new files, update ver
                            try:
                                download_to_file_field(
                                    app_info[item],
                                    getattr(selected_app,
                                            item))
                            except Exception as err:
                                logger.warning(
                                    f"While Downloading {item}, {err}")
                            else:
                                selected_app.downloaded_version = app_info[
                                    'lastest_version']
                    else:
                        formdata = {
                            "name": app_info['name'],
                            "downloaded_version": app_info['lastest_version'],
                            "UUID": app_info['UUID'],
                            "program_file_name": app_info['progam_file_name'],
                            "app_author": app_info['app_author'],
                            "app_homepage_url":
                                store_url + "/apps/details/1/" +
                            str(app_info['id'])

                        }
                        new_process = ProcessingApp.objects.create(
                            **formdata, )
                        for item in process_file_list:
                            download_to_file_field(app_info[item],
                                                   getattr(new_process, item))
                if a_list[1] == "v":
                    app_info = requests.get(
                        store_url + f"/apps/api/VisualizationApp/{a_list[2]}/")
                    app_info = app_info.json()
                    if_exist = VisualizationApp.objects.filter(
                        UUID=app_info['UUID'])
                    if if_exist.count() != 0:
                        selected_app = if_exist[0]

                        # delete old files, download new files, update ver
                        for item in visual_file_list:
                            try:
                                file_url = getattr(selected_app, item)
                                os.remove(os.path.join(
                                    settings.MEDIA_ROOT, file_url.name))
                            except Exception as err:
                                logger.warning(
                                    f"While Deleting {item}, {err}")

                            try:
                                download_to_file_field(
                                    app_info[item],
                                    getattr(selected_app,
                                            item))
                            except Exception as err:
                                logger.warning(
                                    f"While Deleting {item}, {err}")
                            else:
                                selected_app.downloaded_version = app_info[
                                    'lastest_version']
                                selected_app.support_process_apps = \
                                    app_info['support_process_apps']
                    else:

                        formdata = {
                            "name": app_info['name'],
                            "downloaded_version": app_info['lastest_version'],
                            "UUID": app_info['UUID'],
                            "program_file_name": app_info['progam_file_name'],
                            "support_process_apps":
                                app_info['support_process_apps'],
                            "app_author": app_info['app_author'],
                            "app_homepage_url":
                                store_url + "/apps/details/2/" +
                            str(app_info['id'])

                        }
                        new_visaul = VisualizationApp.objects.create(
                            **formdata, )
                        for item in visual_file_list:
                            download_to_file_field(app_info[item],
                                                   getattr(new_visaul, item))
            if "switch_enable_" in actions:  # enabled and disable apps
                a_list = actions.split("_")
                if a_list[-2] == "p":
                    is_enabled = ProcessingApp.objects.filter(
                        pk=a_list[-1]).first().is_enabled
                    ProcessingApp.objects.filter(pk=a_list[-1]).update(
                        is_enabled=not is_enabled)
                if a_list[-2] == "v":
                    is_enabled = VisualizationApp.objects.filter(
                        pk=a_list[-1]).first().is_enabled
                    VisualizationApp.objects.filter(pk=a_list[-1]).update(
                        is_enabled=not is_enabled)
            if "uninstall_" in actions:
                a_list = actions.split("_")
                if a_list[-2] == "p":
                    app_obj = ProcessingApp.objects.filter(
                        pk=a_list[-1])[0]
                    app_obj.is_installed = False
                    app_obj.is_enabled = False  # redundant
                    app_obj.installed_version = None
                    file_name = app_obj.program_file_name
                    try:
                        os.remove(os.path.join(
                            "file_manager/"
                            f"processing_apps/{file_name}.py"))
                        os.remove(
                            f"file_manager/templates/filemanager/"
                            f"{file_name}.html")
                    except OSError:
                        logger.error("file not found while try to uninstall ",
                                     file_name)
                    # remove all system presets (system and user presets)
                    for n in range(1, 9):
                        preset_file = getattr(app_obj, f"preset_{n}")
                        if preset_file:
                            try:
                                os.remove(preset_file.path)
                            except OSError:
                                pass  # file not found
                            finally:
                                setattr(app_obj, f"preset_{n}", None)
                    for n in range(1, 3):
                        preset_file = getattr(app_obj, f"user_preset_{n}")
                        if preset_file:
                            try:
                                os.remove(preset_file.path)
                            except OSError:
                                pass  # file not found
                            finally:
                                setattr(app_obj, f"user_preset_{n}", None)
                    app_obj.save()
                if a_list[-2] == "v":
                    VisualizationApp.objects.filter(pk=a_list[-1]).update(
                        is_installed=False)
                    VisualizationApp.objects.filter(pk=a_list[-1]).update(
                        is_enabled=False)  # redundant
                    VisualizationApp.objects.filter(pk=a_list[-1]).update(
                        installed_version=None)
                    file_name = VisualizationApp.objects.filter(
                        pk=a_list[-1])[0].program_file_name
                    try:
                        os.remove(os.path.join(
                            "file_manager/"
                            f"visualization_apps/{file_name}.py"))
                        os.remove(
                            f"file_manager/templates/filemanager/"
                            f"{file_name}.html")
                    except OSError:
                        logger.error("file not found while try to uninstall ",
                                     file_name)

            if "toinstall_" in actions or "toupdate" in actions:
                a_list = actions.split("_")
                if a_list[-2] == "p":
                    process_app = ProcessingApp.objects.filter(
                        pk=a_list[-1]).first()
                    attached_file_version_string =\
                        process_app.install_package.name
                    attached_version = float(
                        attached_file_version_string.split("version")[1])

                    file_name = process_app.program_file_name
                    installaton_file = os.path.join(
                        settings.MEDIA_ROOT,
                        attached_file_version_string)
                    UUID = process_app.UUID

                    if os.path.exists(installaton_file):
                        logger.info(
                            f'Extracting all the files now to install '
                            f'{installaton_file}')
                        archive = ZipFile(installaton_file)
                        preset_index = 1
                        for file in archive.namelist():
                            if file.endswith('.py'):
                                archive.extract(
                                    file, 'file_manager/processing_apps')
                            if file.endswith('.html'):
                                archive.extract(
                                    file, 'file_manager/templates/filemanager')
                            if file.endswith('.zip'):
                                archive.extract(
                                    file, f"media/{settings.STORAGE_LIST[0]}"
                                    f"/systemfiles/{UUID}/presets/")
                                setattr(process_app,
                                        f"preset_{preset_index}",
                                        f"{settings.STORAGE_LIST[0]}"
                                        f"/systemfiles/{UUID}/presets/" + file)
                                preset_index += 1

                    process_app.is_installed = True
                    process_app.installed_version = attached_version
                    process_app.last_install = datetime.now()
                    process_app.save()

                elif a_list[-2] == "v":
                    visual_app = VisualizationApp.objects.filter(
                        pk=a_list[-1]).first()
                    attached_file_version_string = \
                        visual_app.install_package.name
                    attached_version = float(
                        attached_file_version_string.split("version")[1])
                    file_name = visual_app.program_file_name
                    installaton_file = os.path.join(
                        settings.MEDIA_ROOT,
                        attached_file_version_string)
                    if os.path.exists(installaton_file):
                        logger.info(
                            f'Extracting all the files now to install '
                            f'{installaton_file}')
                        archive = ZipFile(installaton_file)
                        for file in archive.namelist():
                            if file.endswith('.py'):
                                archive.extract(
                                    file, 'file_manager/visualization_apps')
                            if file.endswith('.html'):
                                archive.extract(
                                    file, 'file_manager/templates/filemanager')
                    visual_app.is_installed = True
                    visual_app.installed_version = attached_version
                    visual_app.last_install = datetime.now()
                    visual_app.save()

    args = {
        'server_visualization_apps':
        visual_app_list["results"],
        'server_processing_apps':
        process_app_list["results"],

        'visualization_apps':
        VisualizationApp.objects.all(),
        'processing_apps':
        ProcessingApp.objects.all(),
        'store_url': store_url,

    }

    return render(request, 'filemanager/app_center.html', args)


# uploader for internal test purpose
@ csrf_exempt
@ login_required
def uploader(request):  # internal test purpose
    if request.method == 'POST':
        form_data = {
            'record_name': request.POST.get('run_name'),
            'project_name': request.POST.get('project_name'),
            'temp_rawfile': request.FILES.get('raw_file'),
            'record_creator': request.user,


        }
        SampleRecord.objects.create(**form_data, )

    return render(request, 'filemanager/uploader.html')


# viewset for REST API


class FileStorageViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows FileStorage to be viewed or edited.
    """
    queryset = FileStorage.objects.all().order_by('pk')
    serializer_class = FileStorageSerializer
    permission_classes = [permissions.IsAuthenticated]


class SampleRecordViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows SampleRecord to be viewed or edited.
    """
    queryset = SampleRecord.objects.all().order_by('pk')
    serializer_class = SampleRecordSerializer
    permission_classes = [permissions.IsAuthenticated]


class WorkerStatusViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows WorkerStatus to be viewed or edited.
    """
    queryset = WorkerStatus.objects.all().order_by('pk')
    serializer_class = WorkerStatusSerializer
    permission_classes = [permissions.IsAuthenticated]


class ProcessingAppViewset(viewsets.ModelViewSet):
    queryset = ProcessingApp.objects.filter(is_installed=True).order_by('pk')
    serializer_class = ProcessingAppSerializer
    permission_classes = [permissions.IsAuthenticated]


class DataAnalysisQueueViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows DataAnalysisQueue to be viewed or edited.
    """
    queryset = DataAnalysisQueue.objects.filter().filter().order_by('-pk')
    serializer_class = DataAnalysisQueueSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        qs = super().get_queryset()
        process_app_id = self.request.query_params.get('processappid')
        run_complete = self.request.query_params.get('run_complete')
        # use yes and no, as true and false can conflict with the condition
        if process_app_id:
            qs = qs.filter(processing_app=int(process_app_id))
        if run_complete == "yes":
            qs = qs.filter(run_status=True)
        elif run_complete == "no":
            qs = qs.filter(run_status=False)
        return qs

# https://goodcode.io/articles/django-download-url-to-file-field/


def download_to_file_field(url, field):
    """_Download file to datafield_

    Args:
        url (_type_): _url to download file_
        field (_type_): _field to save file_
    """
    try:
        tempname, _ = urlretrieve(url)
        field.save(os.path.basename(urlsplit(url).path),
                   File(open(tempname, 'rb')))
    finally:
        urlcleanup()
