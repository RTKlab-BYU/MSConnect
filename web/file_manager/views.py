from operator import truediv
from rest_framework import permissions
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework.decorators import api_view
from django.db.models import Count
from django.db.models.functions import TruncDay
from django.conf import settings
from rest_framework import generics
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required, permission_required
from django.contrib.auth import logout
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.db.models.functions.datetime import TruncMonth
from django.contrib.auth.models import Group
import plotly.graph_objs as go
from plotly.graph_objs import Scatter
from plotly.offline import plot
import pickle
import glob
from django.core import management
from django.contrib.admin.views.decorators import staff_member_required


import shutil
import time
import os
import xmltodict
from django.core.files.storage import FileSystemStorage
from django.core.files.uploadedfile import InMemoryUploadedFile
from django.contrib.auth import get_user_model
from django.core.files import File

from .models import FileStorage, SampleRecord, UserSettings, SystemSettings, \
    WorkerStatus, DataAnalysisQueue, Review, \
    AppAuthor, ProcessingApp, VisualizationApp
from .serializers import FileStorageSerializer,  SampleRecordSerializer, \
    WorkerStatusSerializer, DataAnalysisQueueSerializer
from django.conf import settings

User = get_user_model()
startTime = time.time()


# used for authenticated through API, will return render error on server log
# Maybe need add a brute force attach prevention using rest Throtting


@csrf_exempt
@api_view(['POST'])
def auth(request):
    return Response({"message": "Hello, world!"})


# Homepage
@login_required
def dashboard(request):

    # cache data for fast loading, cached is generated by schedule hourly
    cache_file = "file_manager/cache/dash_cache.pickle"
    cached_data = {}

    if os.path.exists(cache_file):
        with open(cache_file, 'rb') as handle:
            cached_data = pickle.load(handle)
            cached_data["last_updated"] = time.ctime(
                os.path.getctime(cache_file))

    # dynamic data loaded from database
    args = {
        "facility_name": SystemSettings.objects.first().facility_name,
    }
    args.update(cached_data)

    return render(request, 'filemanager/dashboard.html', args)


@login_required
def user_settings(request):
    # user settings and system settings (if admin)
    if request.method == 'POST' and 'save_settings' in request.POST:
        UserSettings.objects.filter(
            user=request.user.id).update(hide_othersresult=request.
                                         POST.get('hide_othersresult'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_1_name=request.
                                         POST.get('qc_1_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_2_name=request.
                                         POST.get('qc_2_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_3_name=request.
                                         POST.get('qc_3_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(qc_4_name=request.
                                         POST.get('qc_4_name'))
        UserSettings.objects.filter(
            user=request.user.id).update(QC_pro_tool=request.
                                         POST.get('qc_selector'))
    elif request.method == 'POST' and 'rollback' in request.POST:

        management.call_command(
            'dbrestore', '-z',
            f'-i={request.POST.get("database_to_restore")}', '--noinput')
        # django-dbbackup

    if UserSettings.objects.filter(
            user=request.user.id).first() is None:
        form_data = {
            'user': request.user,

        }
        UserSettings.objects.create(**form_data, )

    # generate list of all apps with presets as a list
    qc_preset_dict = {}
    for item in ProcessingApp.objects.all():
        for n in range(1, 11):
            preset_name = getattr(item, f"preset_{n}")
            if preset_name:
                # format for qc_pro_tool is process_app_pk_"qc"_preset_number
                preset_key = str(item.pk)+"qc"+str(n)
                qc_preset_dict[preset_key] = item.name + \
                    f"_{n}_" + preset_name.name
    qc_preset_dict["None"] = "None"

    args = {
        'settings':
        UserSettings.objects.filter(
            user=request.user.id).first(),
        'qc_settings': qc_preset_dict,
        'all_database_backups': glob.glob(
            os.path.join(settings.MEDIA_ROOT,
                         "primary_storage/database_backup/*.gz")),
    }
    return render(request, 'filemanager/user_settings.html', args)


@staff_member_required
def system_settings(request):
    backup_options = ["Hourly", "Daily",
                      "Weekly", "Monthly", "None"]
    purge_options = ["0", "90", "180", "360", "1000", "3600"]  # days as unit
    schedule_setting_file = "system_configure/schedule.pkl"

    if request.method == 'POST' and 'rollback' in request.POST:

        management.call_command(
            'dbrestore', '-z',
            f'-i={request.POST.get("database_to_restore")}', '--noinput')
    elif request.method == 'POST' and 'backup_now' in request.POST:

        management.call_command('dbbackup', '-z', "--clean")

    elif request.method == 'POST' and 'save_backup_settings' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "backup" in key:
                qs.auto_backup_settings[key] = value[0]
        qs.save()

    elif request.method == 'POST' and 'save_purge_settings' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "purge" in key:
                qs.auto_purge_settings[key] = value[0]
        qs.save()
    elif request.method == 'POST' and \
            'save_system_file_setting' in request.POST:
        qs = SystemSettings.objects.first()
        for key, value in dict(request.POST.lists()).items():
            if "system_file_backup" in key:
                qs.systemfile_backup_settings[key] = value[0]
        qs.save()

    elif request.method == 'POST' and 'save_schedule_settings' in request.POST:

        # file is used as setting need be pulled during system bootup
        schedule_setting_dict = {}
        for key, value in dict(request.POST.lists()).items():
            if "schedule" in key:
                schedule_setting_dict[key] = value[0]
        with open(schedule_setting_file, 'wb') as f:
            pickle.dump(schedule_setting_dict, f)
    elif request.method == 'POST' and 'reboot' in request.POST:
        from pathlib import Path
        # for debug server
        Path('manage.py').touch()
        # for production server
        os.system('/venv/bin/uwsgi --reload /app/datamanager-master.pid')

    schedule_setting_dict = {}
    if os.path.isfile(schedule_setting_file):
        with open(schedule_setting_file, 'rb') as f:
            schedule_setting_dict = pickle.load(f)
    backup_list = glob.glob(
        os.path.join(settings.MEDIA_ROOT,
                     "primary_storage/database_backup/*.gz"))
    backup_list.reverse()
    args = {
        'all_database_backups': backup_list,
        'backup_options': backup_options,
        'purge_options': purge_options,
        'current_backup':
            SystemSettings.objects.first().auto_backup_settings,
        'current_purge':
            SystemSettings.objects.first().auto_purge_settings,
        'schedule': schedule_setting_dict,
        'storage_options': settings.STORAGE_LIST,
        'current_sysfile_backup':
            SystemSettings.objects.first().systemfile_backup_settings

    }
    return render(request, 'filemanager/system_settings.html', args)


def help(request):

    return render(request, 'filemanager/help.html')


@ login_required
def records(request):
    # for a POST search request
    # TODO Maybe there is a cleaner or fast way to do this..
    if request.method == 'POST' and 'data_filter' in request.POST:
        result_queryset = SampleRecord.objects.all().order_by('-pk')
        if request.POST.get('pk_range') != "":
            try:
                pk_range = request.POST.get('pk_range').split("-")
                if pk_range[0]:
                    result_queryset = result_queryset.filter(
                        pk__gte=pk_range[0]).order_by('-pk')
                if pk_range[1]:
                    result_queryset = result_queryset.filter(
                        pk__lte=pk_range[1]).order_by('-pk')
            except Exception as ex:
                print(ex)

        if request.POST.get('qc_range') != "":
            try:
                qc_range = request.POST.get('qc_range').split("-")
                if qc_range[0]:
                    result_queryset = result_queryset.filter(
                        quanlity_check__output_QC_number_1__gte=qc_range[
                            0]).order_by('-pk')
                if qc_range[1]:
                    result_queryset = result_queryset.filter(
                        quanlity_check__output_QC_number_1__lte=qc_range[
                            1]).order_by('-pk')
            except Exception as ex:
                print(ex)
        if request.POST.get('record_name') != "":
            result_queryset = result_queryset.filter(
                record_name__contains=request.POST.
                get('record_name')).order_by('-pk')
        if request.POST.get('record_description') != "":
            result_queryset = result_queryset.filter(
                record_description__contains=request.POST.
                get('record_description')).order_by('-pk')
        if request.POST.get('instrument_sn') != "":
            result_queryset = result_queryset.filter(
                instrument_sn__contains=request.POST.
                get('instrument_sn')).order_by('-pk')
        if request.POST.get('notes') != "":
            result_queryset = result_queryset.filter(
                notes__contains=request.POST.get('notes')).order_by('-pk')
        if request.POST.get('record_creator') != "":
            result_queryset = result_queryset.filter(
                record_creator=request.POST.get('record_creator')).order_by(
                    '-pk')
        if request.POST.get('start_time') != "":
            result_queryset = result_queryset.filter(
                acquisition_time__gte=request.POST.get('start_time')).order_by(
                    '-pk')
        if request.POST.get('end_time') != "":
            result_queryset = result_queryset.filter(
                acquisition_time__lte=request.POST.get(
                    'end_time') + " 23:59").order_by('-pk')

        if request.POST.get('custom_value') != "" and request.POST.get(
                'custom_para') != "":
            variable_column = request.POST.get('custom_para')
            search_type = 'contains'
            filter = variable_column + '__' + search_type
            result_queryset = result_queryset.filter(
                **{filter: request.POST.get('custom_value')}).order_by('-pk')

        if request.POST.get('project_name') != "":
            result_queryset = result_queryset.filter(
                sample_info__sample_project__contains=request.POST.get(
                    'project_name')).order_by('-pk')

        args = {
            'Records': result_queryset,
            'Current_message':
                f"Search resulted {len(result_queryset)} records",
            "formdata": request.POST,
            "users": User.objects.all()


        }
    else:
        # for view recent request (get, not post)
        if UserSettings.objects.filter(
                user=request.user.id).first() is None:
            form_data = {
                'user': request.user,
            }
            UserSettings.objects.create(**form_data, )

        if UserSettings.objects.filter(
                user=request.user.id).first().hide_othersresult:
            args = {
                'Records':
                SampleRecord.objects.filter(
                    record_creator=request.user.id).order_by('-pk')[:100],
                'Current_message': "Last 100 uploaded runs",
                "users": User.objects.all(),

            }
        else:
            all_my_groups = request.user.groups.all()
            users_in_group = User.objects.none()
            for group in all_my_groups:
                users_in_group = users_in_group | Group.objects.get(
                    name=group.name).user_set.all()
            user_id_group = []
            for users in users_in_group:
                user_id_group.append(users.pk)
            my_group_runs = []
            total_counts = 0
            all_runs = SampleRecord.objects.all().order_by('-pk')[:100]
            # hopefully enough  to get 100
            for item in all_runs.iterator():
                if item.record_creator.pk in user_id_group:
                    my_group_runs.append(item)
                # print(item.creator.pk)

            args = {
                'Records': my_group_runs,
                'Current_message': "Last 100 uploaded runs",
                "users": User.objects.all(),
            }

#    add qc parameter names based on user settings
    if UserSettings.objects.filter(
            user=request.user.id).first() is None:
        form_data = {
            'user': request.user,
        }
        UserSettings.objects.create(**form_data, )
    args["qc1"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_1_name
    args["qc2"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_2_name
    args["qc3"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_3_name
    args["qc4"] = UserSettings.objects.filter(
        user=request.user.id).first().qc_4_name

    return render(request, 'filemanager/records.html', args)


@ login_required
def load_record(request, pk, *args, **kwargs):

    message = ""

    if pk == 9990999:  # used for debuging and customized task
        from schedule_archive.automated_tasks import remote_achieve
        remote_achieve()

    # for all request with posts
    if request.method == 'POST' and 'delete' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or\
                SampleRecord.objects.filter(pk=pk)[0].record_creator is None:
            SampleRecord.objects.filter(pk=pk).delete()
            return HttpResponseRedirect("/files/results/")
        else:
            message = "Sorry, you don't own this record"

    # change file name according to record name, only newest raw
    elif request.method == 'POST' and 'update_file_name' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or\
                SampleRecord.objects.filter(pk=pk)[0].record_creator is None:
            current_record_name = SampleRecord.objects.filter(pk=pk)[
                0].record_name
            currenent_filename = SampleRecord.objects.filter(pk=pk)[
                0].newest_raw.file_location.name
            new_filename = os.path.join(os.path.dirname(currenent_filename),
                                        current_record_name + ".raw")
            if (currenent_filename != new_filename):
                try:
                    os.rename(os.path.join(settings.MEDIA_ROOT,
                                           currenent_filename), os.path.join(
                        settings.MEDIA_ROOT, new_filename))
                    if (os.path.exists(os.path.join(
                            settings.MEDIA_ROOT, new_filename))):
                        FileStorage.objects.filter(
                            pk=SampleRecord.objects.filter(pk=pk)[
                                0].newest_raw.pk).update(
                                    file_location=new_filename)

                except Exception as err:
                    message = f"Sorry, please chagne recrod name as {err}"

        else:
            message = "Sorry, you don't own this record"

    elif request.method == 'POST' and 'save' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].record_creator or SampleRecord.objects.filter(
                    pk=pk)[0].record_creator is None:
            SampleRecord.objects.filter(pk=pk).update(
                notes=request.POST.get('notes'))
            SampleRecord.objects.filter(pk=pk).update(
                record_description=request.POST.get('desc'))
            SampleRecord.objects.filter(pk=pk).update(
                is_temp=request.POST.get('is_temp'))
            SampleRecord.objects.filter(pk=pk).update(
                record_name=request.POST.get('record_name'))
            if request.FILES.get('attachment') is not None:
                attachmentfileform = {"file_location": request.FILES.get(
                    'attachment'), "file_type": 5}
                SampleRecord.objects.filter(pk=pk)[0].note_file.add(
                    FileStorage.objects.create(**attachmentfileform, ))
        else:
            message = "Sorry, you don't own this record"

    # plot two plotly graph
    if request.method == 'POST' and 'compare' in request.POST:
        compareid = int(request.POST.get('compare_id'))
        if (SampleRecord.objects.filter(pk=pk)[
            0].cache_pkl.file_location.name is not None and
                SampleRecord.objects.filter(pk=compareid)[
            0].cache_pkl.file_location.name
                is not None):
            filename = SampleRecord.objects.filter(pk=pk)[
                0].cache_pkl.file_location.name
            filename2 = SampleRecord.objects.filter(pk=compareid)[
                0].cache_pkl.file_location.name
            with open(filename, 'rb') as handle:
                plot_data = pickle.load(handle)
            with open(filename2, 'rb') as handle2:
                plot_data2 = pickle.load(handle2)
            plot_div = plot({"data":
                             [Scatter(x=plot_data["MS1_RT"],
                                      y=plot_data["MS1_Basemzintensity"],
                                      mode='lines',
                                      name='BIC',
                                      opacity=0.8,
                                      marker_color='green',
                                      yaxis='y1',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data["MS1_RT"],
                                      y=plot_data["MS1_Ticintensity"],
                                      mode='lines',
                                      name='TIC',
                                      opacity=0.8,
                                      marker_color='Red',
                                      yaxis='y1',
                                      visible='legendonly',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data["MS1_RT"],
                                      y=plot_data["MS1_Basemz"],
                                      mode='lines',
                                      name='m/z',
                                      opacity=0.8,
                                      marker_color='yellow',
                                      visible='legendonly',
                                      yaxis='y1'),
                              Scatter(x=plot_data["MS2_RT"],
                                      y=plot_data["MS2_Injectiontime"],
                                      mode='lines',
                                      name='MS2 Injection Time',
                                      opacity=0.8,
                                      marker_color='blue',
                                      visible='legendonly',
                                      yaxis='y2'),
                              Scatter(x=plot_data2["MS1_RT"],
                                      y=plot_data2["MS1_Basemzintensity"],
                                      mode='lines',
                                      name=f'{compareid} BIC',
                                      opacity=0.8,
                                      marker_color='olive',
                                      yaxis='y1',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data2["MS1_RT"],
                                      y=plot_data2["MS1_Ticintensity"],
                                      mode='lines',
                                      name=f'{compareid} TIC',
                                      opacity=0.8,
                                      marker_color='darkred',
                                      yaxis='y1',
                                      visible='legendonly',
                                      line=dict(width=1,)),
                              Scatter(x=plot_data2["MS1_RT"],
                                      y=plot_data2["MS1_Basemz"],
                                      mode='lines',
                                      name=f'{compareid} m/z',
                                      opacity=0.8,
                                      marker_color='dodgerblue',
                                      visible='legendonly',
                                      yaxis='y1'),
                              Scatter(x=plot_data2["MS2_RT"],
                                      y=plot_data2["MS2_Injectiontime"],
                                      mode='lines',
                                      name=f'{compareid} MS2 Injection Time',
                                      opacity=0.8,
                                      marker_color='firebrick',
                                      visible='legendonly',
                                      yaxis='y2')],
                             "layout":
                             go.Layout(yaxis=dict(title='Ion Intensity /Ab'),
                                       yaxis2=dict(title='Injection Time /ms',
                                                   overlaying='y',
                                                   side='right'))},
                            output_type='div', show_link=False, link_text="")
        else:
            plot_div = None

    else:
        if (SampleRecord.objects.filter(pk=pk)[
                0].cache_pkl.file_location.name is not None):
            filename = SampleRecord.objects.filter(pk=pk)[
                0].cache_pkl.file_location.name
            try:
                with open(filename, 'rb') as handle:
                    plot_data = pickle.load(handle)
                    plot_div = plot({"data":
                                     [Scatter(x=plot_data["MS1_RT"],
                                              y=plot_data[
                                         "MS1_Basemzintensity"],
                                         mode='lines',
                                         name='BIC',
                                         opacity=0.8,
                                         marker_color='green',
                                         yaxis='y1',
                                         line=dict(width=1,)),
                                      Scatter(x=plot_data["MS1_RT"],
                                              y=plot_data["MS1_Ticintensity"],
                                              mode='lines',
                                              name='TIC',
                                              opacity=0.8,
                                              marker_color='Red',
                                              yaxis='y1',
                                              visible='legendonly',
                                              line=dict(width=1,)),
                                      Scatter(x=plot_data["MS1_RT"],
                                              y=plot_data["MS1_Basemz"],
                                              mode='lines',
                                              name='m/z',
                                              opacity=0.8,
                                              marker_color='blue',
                                              visible='legendonly',
                                              yaxis='y1'),
                                      Scatter(x=plot_data["MS2_RT"],
                                              y=plot_data["MS2_Injectiontime"],
                                              mode='lines',
                                              name='MS2 Injection Time',
                                              opacity=0.8,
                                              marker_color='blue',
                                              visible='legendonly',
                                              yaxis='y2')],
                                     "layout":
                                     go.Layout(
                                         yaxis=dict(title='Ion Intensity /Ab'),
                                         yaxis2=dict(
                                             title='Injection Time /ms',
                                             overlaying='y',
                                             side='right'))},
                                    output_type='div',
                                    show_link=False,
                                    link_text="")
            except OSError:
                plot_div = None

        else:
            plot_div = None

    notes = SampleRecord.objects.filter(pk=pk)[0].file_attachments.all()
    notelist = []
    for item in notes:
        notelist.append(item.file_location)

    storages = SampleRecord.objects.filter(pk=pk)[0].file_storage_indeces.all()
    storages_list = []
    for item in storages:
        each_record = {}
        each_record["type"] = item.file_type
        each_record["link"] = item.file_location
        storages_list.append(each_record)

    args = {
        "detail": SampleRecord.objects.filter(pk=pk)[0],
        "notefile": notelist,
        "message": message,
        "plot_div": plot_div,
        "storages": storages_list
    }
    return render(request, 'filemanager/detail.html', args)


@ login_required
def sample_info(request, pk, *args, **kwargs):

    message = ""
    # TODO chagne to a little elegant soltuion for udpating
    if request.method == 'POST' and 'save' in request.POST:
        if request.user == SampleRecord.objects.filter(pk=pk)[
                0].sample.first().record_creator or \
            SampleRecord.objects.filter(
                    pk=pk)[0].sample.first() is None:
            SampleRecord.objects.filter(pk=pk).update(
                sample_type=request.POST.get('sample_type'))
            SampleRecord.objects.filter(pk=pk).update(
                project_name=request.POST.get('project_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_1_name=request.POST.get('factor_1_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_1_value=request.POST.get('factor_1_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_2_name=request.POST.get('factor_2_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_2_value=request.POST.get('factor_2_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_3_name=request.POST.get('factor_3_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_3_value=request.POST.get('factor_3_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_4_name=request.POST.get('factor_4_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_4_value=request.POST.get('factor_4_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_5_name=request.POST.get('factor_5_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_5_value=request.POST.get('factor_5_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_6_name=request.POST.get('factor_6_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_6_value=request.POST.get('factor_6_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_7_name=request.POST.get('factor_7_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_7_value=request.POST.get('factor_7_value'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_8_name=request.POST.get('factor_8_name'))
            SampleRecord.objects.filter(pk=pk).update(
                factor_8_value=request.POST.get('factor_8_value'))

        else:
            message = "Sorry, you don't own this record"

    args = {
        "sample": SampleRecord.objects.filter(pk=pk)[0],
        "message": message,
    }
    return render(request, 'filemanager/sampleinfo.html', args)


@ login_required
def processing_center(request):

    if request.method == 'POST' and 'data_filter' in request.POST:
        result_queryset = DataAnalysisQueue.objects.all().order_by('-pk')
        if request.POST.get('pk_range') != "":
            try:
                pk_range = request.POST.get('pk_range').split("-")
                if pk_range[0]:
                    result_queryset = result_queryset.filter(
                        pk__gte=pk_range[0]).order_by('-pk')
                if pk_range[1]:
                    result_queryset = result_queryset.filter(
                        pk__lte=pk_range[1]).order_by('-pk')
            except Exception as ex:
                print(ex)
        if request.POST.get('qc_range') != "":
            try:
                qc_range = request.POST.get('qc_range').split("-")
                if qc_range[0]:
                    result_queryset = result_queryset.filter(
                        output_QC_number_1__gte=qc_range[
                            0]).order_by('-pk')
                if qc_range[1]:
                    result_queryset = result_queryset.filter(
                        output_QC_number_1__lte=qc_range[
                            1]).order_by('-pk')
            except Exception as ex:
                print(ex)
        if request.POST.get('process_name') != "":
            result_queryset = result_queryset.filter(
                processing_name__contains=request.POST.
                get('process_name')).order_by('-pk')

        if request.POST.get('process_creator') != "":
            result_queryset = result_queryset.filter(
                process_creator=request.POST.get(
                    'process_creator')).order_by('-pk')
        if request.POST.get('process_app') != "":
            result_queryset = result_queryset.filter(
                processing_app=request.POST.get(
                    'process_app')).order_by('-pk')
        if request.POST.get('start_time') != "":
            result_queryset = result_queryset.filter(
                finish_time__gte=request.POST.get(
                    'start_time')).order_by('-pk')

        if request.POST.get('end_time') != "":
            result_queryset = result_queryset.filter(
                finish_time__lte=request.POST.get(
                    'end_time') + " 23:59").order_by('-pk')

        if request.POST.get('contained_record') != "":
            try:
                contained_record_range = request.POST.get(
                    'contained_record').split(",")
                for record in contained_record_range:
                    if 'combined' not in locals():
                        combined = result_queryset.filter(
                            sample_records=record).order_by('-pk')
                    else:
                        combined = combined | result_queryset.filter(
                            sample_records=record).order_by('-pk')

            except Exception as ex:
                print(ex)

            finally:
                result_queryset = combined

    else:
        result_queryset = DataAnalysisQueue.objects.all(
        ).order_by('-pk')[:100]

    args = {
        'processing_apps':
        ProcessingApp.objects.filter(is_enabled=True),
        'workers': WorkerStatus.objects.all(),
        'processing_queue': result_queryset,
        'formdata': request.POST,
        'process_apps': ProcessingApp.objects.all(),
        'users': User.objects.all(),

        'Current_message': f"Showing {len(result_queryset)} records",
    }

    return render(request, 'filemanager/processing_center.html', args)


@ login_required
def visual_center(request):

    args = {
        'visualization_apps':
        VisualizationApp.objects.filter(is_enabled=True),

    }

    return render(request, 'filemanager/visualization_center.html', args)


@ csrf_exempt
@ login_required
def uploader(request):  # internal test purpose
    if request.method == 'POST':
        form_data = {
            'record_name': request.POST.get('run_name'),
            'project_name': request.POST.get('project_name'),
            'temp_rawfile': request.FILES.get('raw_file'),
            'record_creator': request.user,


        }
        SampleRecord.objects.create(**form_data, )

    return render(request, 'filemanager/uploader.html')


# viewset for API


class FileStorageViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows FileStorage to be viewed or edited.
    """
    queryset = FileStorage.objects.all().order_by('pk')
    serializer_class = FileStorageSerializer
    permission_classes = [permissions.IsAuthenticated]


class SampleRecordViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows SampleRecord to be viewed or edited.
    """
    queryset = SampleRecord.objects.all().order_by('pk')
    serializer_class = SampleRecordSerializer
    permission_classes = [permissions.IsAuthenticated]


class WorkerStatusViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows WorkerStatus to be viewed or edited.
    """
    queryset = WorkerStatus.objects.all().order_by('pk')
    serializer_class = WorkerStatusSerializer
    permission_classes = [permissions.IsAuthenticated]


class DataAnalysisQueueViewSet(viewsets.ModelViewSet):
    """
    API endpoint that allows DataAnalysisQueue to be viewed or edited.
    """
    queryset = DataAnalysisQueue.objects.all().order_by('pk')
    serializer_class = DataAnalysisQueueSerializer
    permission_classes = [permissions.IsAuthenticated]
