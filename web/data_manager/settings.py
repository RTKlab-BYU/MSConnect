"""
Django settings for data_manager project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from django.core.management.utils import get_random_secret_key


DEFAULT_SCHEDULE = {
    'schedule_hourly': '5',
    'schedule_daily': '3',
    'schedule_weekly': '6',
    'schedule_monthly': '3'
}
STORAGE_LIST = ["primary_storage", "secondary_storage", "remote_storage",
                "offline_storage", "None"]

BACKUP_OPTIONS = ["Hourly", "Daily",
                  "Weekly", "Monthly", "None"]


PURGE_OPTIONS = ["0", "90", "180", "360", "1000", "3600"]  # days as unit


DEFAULT_MZML_CONVERSION_SETTING = {
    "docker_image": "proteowizard/pwiz-skyline-i-agree-to-the-vendor-licenses",
    "command_list_before_file": ["wine", "msconvert"],
    "command_list_after_file": ["-o", "/data"]

}

<<<<<<< HEAD
env = environ.Env()
environ.Env.read_env()
# used to load sensitive information, e.g., secret key, password, etc.
=======

PROCESS_FILE_LIST = ["input_file_1", "input_file_2", "input_file_3",
                     "output_file_1", "output_file_2", "output_file_3", ]


TEMP_FOLDER = "/temp/"


FILE_CONVERT_RETRY = 6
# during local debug, load local .env, instead of rely on docker passed value
if "DEBUG" not in os.environ:
    from dotenv import load_dotenv
    load_dotenv('data_manager/.debug.env')

>>>>>>> b8377cc (before modify app store structure)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["10.37.240.41", 'localhost',
                 "192.168.102.188", "127.0.0.1", "10.37.35.98"]


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django_filters',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'file_manager.apps.FileManagerConfig',
    'dbbackup',  # django-dbbackup
    "django_extensions",  # for Jupiter notebook
    "log_viewer",  # for view log
]

<<<<<<< HEAD
NOTEBOOK_ARGUMENTS = [
    # exposes IP and port
    '--ip=0.0.0.0',
    '--port=8080',
    # disables the browser
    '--no-browser',
    '--NotebookApp.token="byu84602"',
    '--NotebookApp.password=''',
    '--notebook-dir=~/Jupiter_workflow'
]
=======

log_folder = 'media/primary_storage/log/'

if not os.path.isdir(log_folder):
    os.makedirs(log_folder)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '[%(levelname)s] %(asctime)s  %(name)s: %(message)s'
        },
    },
    'handlers': {
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{log_folder}Django_all.log',
            'maxBytes': 1024*1024*25,  # 25 MB
            'backupCount': 5,
            'formatter': 'standard',
        },

        'errors': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{log_folder}Django_error.log',
            'maxBytes': 1024*1024*25,  # 25 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'request_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{log_folder}/django_request.log',
            'maxBytes': 1024*1024*25,  # 25 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default', 'errors'],
            'level': 'DEBUG',
            'propagate': True
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}

# settings for django log viewer
LOG_VIEWER_FILES_PATTERN = '*.log*'
LOG_VIEWER_FILES_DIR = 'media/primary_storage/log/'
LOG_VIEWER_PAGE_LENGTH = 100       # total log lines per-page
LOG_VIEWER_MAX_READ_LINES = 10000  # total log lines will be read
# Max log files loaded in Datatable per page
LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 50
LOG_VIEWER_PATTERNS = ['[INFO]', '[DEBUG]',
                       '[WARNING]', '[ERROR]', '[CRITICAL]']
# String regex expression to exclude the log from line
LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None

# Optionally you can set the next variables in order to customize the admin:
LOG_VIEWER_FILE_LIST_TITLE = "Django Log viewer"
LOG_VIEWER_FILE_LIST_STYLES = "/static/css/my-custom.css"


>>>>>>> b8377cc (before modify app store structure)
# setting for the dbbackup to backup database
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {
    'location': 'media/primary_storage/database_backup'}
DBBACKUP_CLEANUP_KEEP = 168  # total number of backups
DBBACKUP_HOSTNAME = "PDM_Server"
DBBACKUP_CONNECTORS = {
    'default': {
        'CONNECTOR': 'dbbackup.db.sqlite.SqliteCPConnector',
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_currentuser.middleware.ThreadLocalUserMiddleware',

]

ROOT_URLCONF = 'data_manager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_manager.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'public.sqlite3',

    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Denver'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.'
                                'pagination.PageNumberPagination',
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],



}

MEDIA_DIR = os.path.join(BASE_DIR, 'media')

MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = '/'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


EMAIL_BACKEND = os.environ['EMAIL_BACKEND']
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_USE_TLS = os.environ['EMAIL_USE_TLS']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']


juptier_folder = os.path.join(
    MEDIA_ROOT, f"{STORAGE_LIST[0]}/JupiterNotebook")

check_dir = os.path.isdir(juptier_folder)

if not check_dir:
    os.makedirs(juptier_folder)
NOTEBOOK_ARGUMENTS = [
    # exposes IP and port
    '--ip=0.0.0.0',
    '--port=8080',
    # disables the browser
    '--allow-root',
    '--no-browser',
    f'--NotebookApp.token={os.environ["JUPTER_PASSWORD"]}',
    '--NotebookApp.password=''',
    f'--notebook-dir={juptier_folder}'
]


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
database_file = os.path.join(
    MEDIA_ROOT, f"{STORAGE_LIST[0]}/database.sqlite3")


# init_database = os.path.join(
#     MEDIA_ROOT, "backup.sqlite3")

# is_database = os.path.isfile(database_file)

# if not is_database:
#     import shutil
#     shutil.copyfile(init_database, database_file)

#########################################################
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': database_file,

    }
}
SCHEDULE_SETTING_FILE = os.path.join(
    MEDIA_ROOT,
    f"{STORAGE_LIST[0]}/systemfiles/schedule.pkl")

DEFAULT_SCHEDULE = {
    'schedule_hourly': '5',
    'schedule_daily': '3',
    'schedule_weekly': '6',
    'schedule_monthly': '3'
}
